Reflect: Initializing a Repository

Now that you’ve initialized your first repository, go to your reflections directory, create a new file called lesson_2_reflections.txt, and add the following question and your thoughts on it:

What happens when you initialize a repository? Why do you need to do it?

You may also wish to run git status after you have created the file. You should see that now both files are listed as untracked files.

When you've created and updated your reflections document for lesson 2, click "Next."

Reflect: Staging Area

Now that you’ve added a file to the staging area (or maybe multiple files!), go add the following question and your thoughts on it to your lesson_2_reflections file:

How is the staging area different from the working directory and the repository? What value do you think it offers?

When you've updated your document, click "Next" and Caroline will go over how to commit the changes you’ve added to the staging area.

Reflect: Commit Size

Now that you’ve committed changes using the staging area, go add the following question and your thoughts on it to your lesson_2_reflections file:

How can you use the staging area to make sure you have one commit per logical change?

You may also want to commit your changes to the file. When you're ready to move on, click "Next" and Sarah will go over a concept called branching.

Reflect: Visualizing with Diagrams

Now that you’ve had some experience creating branches and drawing diagrams of your history, go add the following question and your thoughts on it to your reflections file:

How do the diagrams help you visualize the branch structure?

You may also want to commit your changes to the file. When you're ready to move on, click "Next."

Reflect: Merging Two Branches

Now that you’ve learned how to use Git to merge branches together, go add the following question and your thoughts on it to your reflections file:

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

You may also want to commit your changes to the file. When you're ready to move on, click "Next" and Sarah will explain why this automatic merge process won't always be possible and what happens instead.

Reflect: Automatic vs. Manual Merging

Now that you’ve learned when Git will not be able to automatically merge branches, and what happens when it can’t, go add the following question and your thoughts on it to your reflections file:

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

You may also want to commit your changes to the file. When you're ready to move on, click "Next" to hear from Jeffrey again about how he uses some of the tools you've learned about in this lesson.